#!/bin/bash

# Symdep - Symfony2 Deployment 2000 Luxus Tornado
# Symfony2 deploying script
#  Version     : 1.0-beta
#  Author      : sid [ symdep/at/sidowo/dot/pl | http://sidowo.pl ]
#  Release date: 12.10.12

function ask(){
	if [ -z "$3" ]; then
		echo -ne "\n\033[1;37m $1 \033[1;32m[\033[1;37m$2\033[1;32m]: \033[1;0m"
		read ansE
		echo " "
		if [ "$ansE" == "" ]; then
			ansE="$2"
		fi;
	else
		ansE=$3
	fi;
}

function checkProjectPath(){
	try "Checking for Symfony2 project" "ls $projectDir/app/config/parameters.ini" die
	try "Checking for symdep configs" "ls $projectDir/app/config/parameters_prod.ini" die
	try "rsync_exclude.txt" "ls $projectDir/app/config/rsync_exclude.txt" die
	try "deployconf.sh" "ls $projectDir/app/config/deployconf.sh" die
	source $projectDir/app/config/deployconf.sh	
}

function getProjectPath(){
	if [ "$1" != "" ]; then
		info "Project path: $1"
		projectDir=$1
	else
		print "Enter project path" "`pwd`"
		read projectDirE
		if [ -n "$projectDirE" ]; then
			projectDir=$projectDirE
		else 
			projectDir=`pwd`
		fi;
	fi;
}


function print(){
	if [ -z "$2" ]; then 
		echo -e "\033[1;32m$1\033[1;0m"
	else 
		echo -ne "\n\033[1;37m $1 \033[1;32m[\033[1;37m$2\033[1;32m]: \033[1;0m"	
	fi;
}

function info(){
		echo -e "\033[1;37m  -> \033[1;32m$1\033[1;0m"
}

function try(){
	text=$1
	command=$2
	die=$3
	printf "\033[1;37m  -> \033[1;32m%-60s\033[1;0m" "$text"
	log=$(eval $command 2>&1)
	
	if [ "$?" == 0 ]; then
		echo -e "\033[1;33m[OK]\033[1;0m"
	else
		echo -e "\033[1;31m[ERROR]\033[1;0m"
		print "Error output:"
		echo $log
		if [ "$die" == "die" ]; then
			error "Cannot continue."
			exit 1
		fi;
	fi;
	
}


function error(){
	echo -e "\033[1;31m[!!] \033[1;37m$1\033[1;0m"
}

function check(){
	
	info "Checking for deployconf.sh..."
	if [ ! -f "$1/app/config/deployconf.sh" ]; then
		error "Cannot find deploy.sh in $projectDir/app/config/deployconf.sh"
		exit 1
	fi;

	info "Checking for rsync_exclude.txt..."
	if [ ! -f "$1/app/config/rsync_exclude.txt" ]; then
		error "Cannot find rsync exclude file in $projectDir/app/config/rsync_exclude.txt"
		exit 2
	fi;

	info "Checking for parameters_prod.ini..."
	if [ ! -f "$1/app/config/parameters_prod.ini" ]; then
		error "Cannot find parameters_prod.ini file in $projectDir/app/config/parameters_prod.ini"
		exit 3
	fi;

}

function setup(){

	print " SETUP PROJECT"

	getProjectPath $1

	print "Setting up symfony project to use symdep."
	
	if [ ! -f $projectDir/app/config/deployconf.sh ]; then
		error "File $projectDir/app/config/deployconf.sh already exists"
		exit 1
	fi;	
	info "Creating default $projectDir/app/config/deployconf.sh..."
	echo >> $projectDir/app/config/deployconf.sh << EOF
# SSH Server host, required
server=localhost
# SSH port, required
port=22
# SSH user, required
user=
# SSH password, optional
password=
# Relative path from home to releases dir, required
remoteReleasesDir=public_html/releases
# Absolute path to home dir, required
sshHome=/home/user
# Absolute path to php, required
sshPHPPath=/usr/local/php5.3/bin/php
# Always switch current release to uploaded? [y/n], optional (empty value=interactive mode)
switch=
# Always clear app cache for current release? [y/n], optional (empty value=interactive mode)
clearCache=
# Release name, optional
release=
# Project writable dir (for example uplad dir) which should be preserved (copied), optional
projectWritableDir=web/uploads
# Copy writable content from current release to uploaded? optional (empty value=interactive mode)
projectWritablePerformCopy=
# Default answer to perform database overwrite in mysql production to development sync, , optional (empty value=interactive mode)
mysqlSyncPD=
# Default answer to perform database overwrite in mysql development to production sync, , optional (empty value=interactive mode)
mysqlSyncDP=
# Default answer to in-project writable dir sync  (production -> development), optional (empty value=interactive mode)
pwritableSyncPD=
# Default answer to in-project writable dir sync (development -> production), optional (empty value=interactive mode)
pwritableSyncDP=
EOF

	if [ ! -f $projectDir/app/config/rsync_exclude.txt ]; then
		error "File $projectDir/app/config/rsync_exclude already exists"
		exit 1
	fi;	
	info "Creating default $projectDir/app/config/rsync_exclude.txt..."
	cat >> $projectDir/app/config/rsync_exclude.txt << EOF
*.txt
.git
deps
README.md
- app/cache/*
- app/logs/*
- app/config/parameters.ini
- app/config/parameters_prod.ini
- app/config/deploy.sh
EOF

	if [ ! -f $projectDir/app/config/parameters_prod.ini ]; then
		error "File $projectDir/app/config/parameters_prod.ini already exists"
		exit 1
	fi;	
	info "Copying parameters.ini to parameters_prod.ini"
	cp $projectDir/app/config/parameters.ini $projectDir/app/config/parameters_prod.ini 

	print "Done. Open manually files above and edit with your production server data."

}


function upload(){

	print " UPLOAD PROJECT"

	getProjectPath $1

	checkProjectPath

	ask "Enter release name" "`date "+%d%m%y%H%M"`" $release

	release=$ansE
		
	if [ "$password" != "" ]; then
		info "SSH password from deployconf.sh"
	else 
		print "Enter SSH password" "none" 
		read -s password
		echo " "
	fi;
	
	ask "Ready for deploy. Continue?" "y/n"

	if [ "$ansE" != "y" ]; then
		print "Aborted."
		exit 4
	fi;

	info "Starting upload"
	
	try "Uploading application via rsync..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $projectDir/ $user@$server:$sshHome/$remoteReleasesDir/$release --exclude-from=$projectDir/app/config/rsync_exclude.txt" die

	try "Uploading parameters.ini via rsync..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $projectDir/app/config/parameters_prod.ini $user@$server:$sshHome/$remoteReleasesDir/$release/app/config/parameters.ini" die

	if [ "$projectWritableDir" != "" ]; then
		ask "Do you want to copy in-project writable directory from current to uploaded?" "y/n" $projectWritablePerformCopy
		if [ "$ansE" == "y" ]; then
			curData=$sshHome/$remoteReleasesDir/current/$projectWritableDir
			uplDir=`dirname $sshHome/$remoteReleasesDir/$release/$projectWritableDir`
			try "Copying..." "sshpass -p $password ssh -p $port $user@$server \"cp -R $curData $uplDir\""
		fi		
	fi;
	

	ask "Do you want to switch current release to uploaded?" "y/n" $switch
	
	if [ "$ansE" == "y" ]; then
		try "Switching current release to $release..." "sshpass -p $password ssh -p $port $user@$server \"rm $sshHome/$remoteReleasesDir/current && ln -s $sshHome/$remoteReleasesDir/$release $sshHome/$remoteReleasesDir/current\"" die 
	fi;

	ask "Do you want to clear cache on target" "y/n" $clearCache
	
	if [ "$ansE" == "y" ]; then
		try "Clearing cache..." "sshpass -p $password ssh -p $port $user@$server \"$sshPHPPath $sshHome/$remoteReleasesDir/current/app/console cache:clear --env=prod\"" die
	fi;

	info "Exiting."
}

function readDbData(){
	sqluser=`cat $projectDir/app/config/parameters_prod.ini |tr -d [:blank:]|grep database_user=|cut -d'"' -f2`
	sqlpass=`cat $projectDir/app/config/parameters_prod.ini |tr -d [:blank:]|grep database_password=|cut -d'"' -f2`
	sqldb=`cat $projectDir/app/config/parameters_prod.ini |tr -d [:blank:]|grep database_name=|cut -d'"' -f2`

	devsqluser=`cat $projectDir/app/config/parameters.ini |tr -d [:blank:]|grep database_user=|cut -d'"' -f2`
	devsqlpass=`cat $projectDir/app/config/parameters.ini |tr -d [:blank:]|grep database_password=|cut -d'"' -f2`
	devsqldb=`cat $projectDir/app/config/parameters.ini |tr -d [:blank:]|grep database_name=|cut -d'"' -f2`
}

function mysqlsync(){

	print " MYSQL SYNC"

	getProjectPath $1

	checkProjectPath

	info "Reading database credentials..."

	readDbData

	echo ""
	
	if [ "$2" == "p-d" ]; then

		info "Mysql synchronization PRODUCTION -> DEVELOPMENT"
		try "Creating database dump on production server..." "sshpass -p $password ssh -p $port $user@$server eval \"mysqldump -u$sqluser -p$sqlpass $sqldb | bzip2 > $sshHome/prod.sql.bz2\"" die

	
		try "Downloadig database..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $user@$server:$sshHome/prod.sql.bz2 $projectDir/prod.sql.bz2" die

		try "Decompressing..." "bunzip2 $projectDir/prod.sql.bz2" die
	
		ask "Do you want to continue (existing database on development will be replaced!)?" "y/n" $mysqlSyncPD
		
		if [ "$ansE" == "y" ]; then
			try "Importing database to development..."	"mysql -u$devsqluser -p$devsqlpass $devsqldb < $projectDir/prod.sql"
		else
			error "Aborted"		
		fi;	
	
		try "Deleting local  dump..." "rm $projectDir/prod.sql"
		try "Deleting remote dump..." "sshpass -p $password ssh -p $port $user@$server \"rm $sshHome/prod.sql.bz2\""
		
	elif [ "$2" == "d-p" ]; then

		info "Mysql synchronization DEVELOPMENT -> PRODUCTION"
		try "Creating database dump on development server..." "mysqldump -u$devsqluser -p$devsqlpass $devsqldb | bzip2 > $projectDir/dev.sql.bz2" die

	
		try "Uploading database..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $projectDir/dev.sql.bz2 $user@$server:$sshHome/dev.sql.bz2" die

		try "Decompressing on remote server..." "sshpass -p $password ssh -p $port $user@$server \"bunzip2 $sshHome/dev.sql.bz2\""

		ask "Do you want to continue (existing production database will be replaced!)?" "y/n" $mysqlSyncDP
		
		if [ "$ansE" == "y" ]; then
		
			try "Importing database on production server..." "sshpass -p $password ssh -p $port $user@$server \"mysql -u$sqluser -p$sqlpass $sqldb < $sshHome/dev.sql\""
			
		else
			error "Aborted"		
		fi;	
	
		try "Deleting local  dump..." "rm $projectDir/dev.sql.bz2"
		try "Deleting remote dump..." "sshpass -p $password ssh -p $port $user@$server \"rm $sshHome/dev.sql\""

	else
		error "Wrong parameter."
	fi;
	
	info "Exiting."
}

function snapshot(){

	print " CREATE SNAPSHOT"

	getProjectPath $1

	checkProjectPath

	info "Reading database credentials..."

	readDbData

	echo ""
		

	info "Creating snapshot for release $release..."
	
	try "Creating database dump on production server..." "sshpass -p $password ssh -p $port $user@$server eval \"mysqldump -u$sqluser -p$sqlpass $sqldb | bzip2 > $sshHome/$remoteReleasesDir/$release/prod.sql.bz2\"" die

	ask "Enter file name for snapshot (without extension)?" "snapshot_`date "+%d%m%y_%H%M%S"`"

	if [ "$ansE" == "" ]; then
		error "Snapshot name cannot be empty!"
		exit 1
	fi;


	try "Downloadig snapshot via rsync..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $user@$server:$sshHome/$remoteReleasesDir/$release $ansE/  --exclude-from=$projectDir/app/config/rsync_exclude.txt" die

	try "Compressing snapshot" "tar -cpf $ansE.tar $ansE/ && bzip2 $ansE.tar" die

	try "Deleting remote mysql dump..." "sshpass -p $password ssh -p $port $user@$server \"rm $sshHome/$remoteReleasesDir/$release/prod.sql.bz2\""

	
	info "Deleting local uncompressed snapshot: `pwd`/$ansE"
	rm -rfI `pwd`/$ansE
	
	print "Snapshot file created at: $ansE.tar.bz2"
		
	info "Exiting."
	

}

function pwritable(){

	print " IN-PROJECT WRITABLE DIR SYNC"

	getProjectPath $1

	checkProjectPath

	echo ""
	
	dir=`dirname $projectWritableDir`
	
	if [ "$2" == "p-d" ]; then

		info "PRODUCTION -> DEVELOPMENT"

		ask "Do you want to continue?" "y/n" $pwritableSyncPD
		
		if [ "$ansE" == "y" ]; then
			try "Downloading via rsync..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $user@$server:$remoteReleasesDir/$release/$projectWritableDir $projectDir/$dir --exclude-from=$projectDir/app/config/rsync_exclude.txt" die
		else
			error "Aborted"		
		fi;	
			
	elif [ "$2" == "d-p" ]; then

		info "DEVELOPMENT -> PRODUCTION"

		ask "Do you want to continue?" "y/n" $pwritableSyncDP
		
		if [ "$ansE" == "y" ]; then
		
			try "Downloading via rsync..." "rsync -avzE --rsh=\"sshpass -p $password ssh -p $port\" $projectDir/$projectWritableDir $user@$server:$sshHome/$remoteReleasesDir/$release/$dir --exclude-from=$projectDir/app/config/rsync_exclude.txt" die
			
		else
			error "Aborted"		
		fi;	
	fi;
	
	info "Exiting."
}

function version(){
	echo -e "\033[1;33m Version: \033[1;37m1.0-beta"
	echo -e "\033[1;33m  Author: \033[1;37mSid"	
	echo -e "\033[1;33m       @: \033[1;37msymdep[at]sidowo[dot]pl"	
	echo -e "\033[1;33m      W3: \033[1;37mhttp://sidowo.pl"		
	echo -e "\033[1;0m"
}

print "Symfony2 Deployment 2000 Luxus Tornado\n----------------------------------------------"

if [ "$1" == "upload" ]; then
	upload $2
elif [ "$1" == "setup" ]; then
	setup $2
elif [ "$1" == "mysqlsync" ]; then
	mysqlsync $3 $2
elif [ "$1" == "snapshot" ]; then
	snapshot $2
elif [ "$1" = "pwritable" ]; then
	pwritable $3 $2
elif [ "$1" = "version" ]; then
	version
else 
	echo "Usage: symdep [command] PROJECT_DIRECTORY"
	echo " Commands:"
	echo -e "\033[1;32m  setup\033[1;37m             - setup project for using with symdep"
	echo -e "\033[1;32m  upload\033[1;37m            - upload project"
	echo -e "\033[1;32m  mysqlsync p-d|d-p\033[1;37m - copy mysql database content in selected direction (prod-dev, dev-prod)"
	echo -e "\033[1;32m  snapshot\033[1;37m          - get full application backup (mysql dump+project dir)"
	echo -e "\033[1;32m  pwritable p-d|d-d\033[1;37m - copy in-project writable directory in selected direction"
	echo -e "\033[1;32m  version \033[1;37m          - display version info"
	echo -e "\033[1;0m"

fi;

